#+title: C++中template模板的学习

今天遇到了一些学习C++的困难,主要在于,如何去使用template.

primer中说:"一个模板就是一个创建类或函数的蓝图(公式)".
* 模板的定义
模板的灵活性,多是体现在"对类型的推断上".比如,针对一个比较两个数谁大谁小的函数,我们哪里知道这两个数是什么类型的呢?因此可以用到模板.

** 函数模板

*** 基本的函数模板定义与调用形式
 顾名思义,就是通过一个固定的架构来生成一堆函数.
 比如刚刚提到的:
 #+BEGIN_SRC C++
   template<typename T>
   int compare(const T &a, const T &b){
     if (a<b) return -1;
     if (a>b) return +1;
     return 0;
   }
 #+END_SRC
 只要记住这个基本的格式就行了.在实际使用的时候,只需要调用这样一个template,比如

 #+BEGIN_SRC C++
   int a=1;
   int b=0;
   int c;
   c=compare(a,b)
 #+END_SRC
 就可以直接调用了.剩下的活全部都交给了编译器,是不是非常简单.

*** 函数模板的参数问题(类型参数与非类型参数)
1. 类型参数. 类型参数就是单指对"对象"的"类型"进行确定的参数.每一个类型参数前面都需要加一个"typename",或者"class".这样被定义的类型一般可以被使用在函数的任何地方.
2. 非类型参数. 非类型参数的定义,都会使用固定的,已知的类型.比如下面的代码

   #+BEGIN_SRC C++
     //下面的T,A是类型参数,m,n是非类型参数.
     template<typename T, class A, unsigned int m, unsigned int n>
     int concat(const T &a[m], const T &b[n], const A c)
     {
       something;
       return 0
     }
     ,#+BEGIN_SRC C++

     #+END_SRC
一般来说,模板在头文件里,既包含声明,也包含定义.

** 类模板
   与函数模板不同,类模板自定义的类型参数无法通过编译器的推理获得.因此,类模板需要提供额外的参数信息.下面是一个关于类模板的简单示例.
   #+BEGIN_SRC C++
     template<typename T> class Blob{
     public:
       typedef T value_type;
       typedef T std::vector<T>::size_type size_type;

       //constrcution function
       Blob();
       Blob(std::initializer_list<T> il);
       size_type size() const {
	 return data->size();
       }
       bool empty() const {
	 return data->empty();
       }
       void push_back(const T &t){
	 data->push_back(t);
       }
       void push_back(T &&t){
	 data->push_back(std::mouve(t));
       }
       void pop_back();

       //元素访问
       T & back();
       T & operator[](size_type i);;
     private:
       std::shared_ptr<std::vector<T>>data;
     }
   #+END_SRC

先不去纠结这个类究竟有何意义,我们直接看一下如何调用之.
啊,非常简单:
#+BEGIN_SRC C++
  Blob<int> ia;
  Blob<int>ia1={0,1,2,3,4};
#+END_SRC
总之,单纯使用一个尖括号进行调用就可以了.

好了,不先往下看,要去和hnswlib对线了!


* 模板的实参推断
* 重载与模板
* 模板的特例化
